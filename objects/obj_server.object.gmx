<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create event

var Type, Port, MaxClients;
Type = network_socket_tcp;
Port = 64198;
MaxClients = 32;
Server = network_create_server(Type, Port, MaxClients);

var Size, Type, Alignment;
Size = 1024;
Type = buffer_fixed;
Alignment = 1;
Buffer = buffer_create(Size, Type, Alignment);

SocketList = ds_list_create();
CurrentClient = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send all updated info about the game to the client


if(CurrentClient == noone) exit;

buffer_seek(Buffer, buffer_seek_start, 0);
buffer_write(Buffer, buffer_u8, 3);


// Add the position of the server paddle
buffer_write(Buffer, buffer_u32, obj_server_paddle.y);

// Add the position of the client paddle
buffer_write(Buffer, buffer_u32, obj_client_paddle.y);

// Add the position of the ball
buffer_write(Buffer, buffer_u32, obj_ball.x);
buffer_write(Buffer, buffer_u32, obj_ball.y);

// Add the score
buffer_write(Buffer, buffer_u8, obj_ball.server_score); 
buffer_write(Buffer, buffer_u8, obj_ball.client_score); 

// Send the packet
network_send_packet(CurrentClient, Buffer, buffer_tell(Buffer));







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking event

var type_event = async_load[? "type"];

switch(type_event) {

    case network_type_connect:
        var socket = async_load[? "socket"];
        ds_list_add(SocketList, socket);
        CurrentClient = socket;
        break;
    
    case network_type_disconnect:
        var socket = async_load[? "socket"];
        var findsocket = ds_list_find_index(SocketList, socket);
        if(findsocket &gt;= 0) {
            ds_list_delete(SocketList, findsocket);
        } 
        CurrentClient = noone;
        break;
        
    case network_type_data:
        var buffer = async_load[? "buffer"];
        var socket = async_load[? "id"];
        buffer_seek(buffer, buffer_seek_start, 0);
        ReceivedPacket(buffer, socket);
        break;


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

network_destroy(Server);
buffer_delete(Buffer);
ds_list_destroy(SocketList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display server info

draw_set_color(c_gray);
draw_set_halign(fa_left);

draw_text(5, 5, "Server status: " + string( Server &gt;= 0));
draw_text(5, 20, "Total clients: " + string( ds_list_size(SocketList)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
